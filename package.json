{
	"name": "cc65-dbg",
	"displayName": "cc65 Debugger",
	"version": "0.52.0",
	"publisher": "X65 Project",
	"description": "cc65 assembly language debugger for VS Code.",
	"author": {
		"name": "Tomasz Sterna"
	},
	"license": "MIT",
	"keywords": ["multi-root ready"],
	"engines": {
		"vscode": "^1.99.0"
	},
	"icon": "images/cc65-dbg-icon.png",
	"categories": ["Debuggers"],
	"private": true,
	"repository": {
		"type": "git",
		"url": "https://github.com/X65/cc65-dbg.git"
	},
	"bugs": {
		"url": "https://github.com/X65/cc65-dbg/issues"
	},
	"scripts": {
		"compile": "tsc -p ./",
		"check": "biome check src",
		"typecheck": "tsc -p tsconfig.json --noEmit",
		"esbuild-base": "esbuild ./src/extension.ts --bundle --tsconfig=./tsconfig.json --external:vscode --format=cjs --platform=node --outfile=dist/extension.js",
		"watch": "npm run -S esbuild-base -- --sourcemap --sources-content=false --watch",
		"esbuild-web": "esbuild ./src/web-extension.ts --bundle --tsconfig=./tsconfig.json --external:vscode --format=cjs --platform=browser --outfile=dist/web-extension.js",
		"watch-web": "npm run -S esbuild-web -- --sourcemap --sources-content=false --watch",
		"build": "npm run -S esbuild-base -- --sourcemap --sources-content=false && npm run -S esbuild-web -- --sourcemap --sources-content=false",
		"package": "vsce package",
		"publish": "vsce publish",
		"publish-pre-release": "vsce publish --pre-release",
		"vscode:prepublish": "rimraf dist && npm run -S esbuild-base -- --minify && npm run -S esbuild-web -- --minify",
		"test": "npm run typecheck"
	},
	"devDependencies": {
		"@biomejs/biome": "^1.9.4",
		"@types/glob": "^8.1.0",
		"@types/mocha": "^10.0.10",
		"@types/node": "^22.14.1",
		"@types/vscode": "^1.99.1",
		"@vscode/debugadapter": "^1.68.0",
		"@vscode/debugadapter-testsupport": "^1.68.0",
		"@vscode/vsce": "^3.3.2",
		"await-notify": "^1.0.1",
		"base64-js": "^1.5.1",
		"esbuild": "^0.25.2",
		"events": "^3.3.0",
		"glob": "^8.1.0",
		"mocha": "^11.1.0",
		"path-browserify": "^1.0.1",
		"rimraf": "^6.0.1",
		"typescript": "^5.8.3",
		"url": "^0.11.4"
	},
	"main": "./dist/extension.js",
	"browser": "./dist/web-extension.js",
	"activationEvents": [
		"onDebugResolve:mock",
		"onDebugDynamicConfigurations:mock",
		"onCommand:extension.cc65-dbg.getProgramName"
	],
	"workspaceTrust": {
		"request": "never"
	},
	"contributes": {
		"menus": {
			"editor/title/run": [
				{
					"command": "extension.cc65-dbg.runEditorContents",
					"when": "resourceLangId == markdown",
					"group": "navigation@1"
				},
				{
					"command": "extension.cc65-dbg.debugEditorContents",
					"when": "resourceLangId == markdown",
					"group": "navigation@2"
				}
			],
			"commandPalette": [
				{
					"command": "extension.cc65-dbg.debugEditorContents",
					"when": "resourceLangId == markdown"
				},
				{
					"command": "extension.cc65-dbg.runEditorContents",
					"when": "resourceLangId == markdown"
				}
			],
			"debug/variables/context": [
				{
					"command": "extension.cc65-dbg.toggleFormatting",
					"when": "debugType == 'mock' && debugProtocolVariableMenuContext == 'simple'"
				}
			]
		},
		"commands": [
			{
				"command": "extension.cc65-dbg.debugEditorContents",
				"title": "Debug File",
				"category": "Mock Debug",
				"enablement": "!inDebugMode",
				"icon": "$(debug-alt)"
			},
			{
				"command": "extension.cc65-dbg.runEditorContents",
				"title": "Run File",
				"category": "Mock Debug",
				"enablement": "!inDebugMode",
				"icon": "$(play)"
			},
			{
				"command": "extension.cc65-dbg.toggleFormatting",
				"title": "Toggle between decimal and hex formatting"
			}
		],
		"breakpoints": [
			{
				"language": "markdown"
			}
		],
		"debuggers": [
			{
				"type": "mock",
				"languages": ["markdown"],
				"label": "Mock Debug",
				"program": "./out/debugAdapter.js",
				"runtime": "node",
				"configurationAttributes": {
					"launch": {
						"required": ["program"],
						"properties": {
							"program": {
								"type": "string",
								"description": "Absolute path to a text file.",
								"default": "${workspaceFolder}/${command:AskForProgramName}"
							},
							"stopOnEntry": {
								"type": "boolean",
								"description": "Automatically stop after launch.",
								"default": true
							},
							"trace": {
								"type": "boolean",
								"description": "Enable logging of the Debug Adapter Protocol.",
								"default": true
							},
							"compileError": {
								"type": "string",
								"description": "Simulates a compile error in 'launch' request.",
								"enum": ["default", "show", "hide"],
								"enumDescriptions": [
									"default: show fake compile error to user",
									"show fake compile error to user",
									"do not show fake compile error to user"
								]
							}
						}
					},
					"attach": {
						"required": ["program"],
						"properties": {
							"program": {
								"type": "string",
								"description": "Absolute path to a text file.",
								"default": "${workspaceFolder}/${command:AskForProgramName}"
							},
							"stopOnEntry": {
								"type": "boolean",
								"description": "Automatically stop after attach.",
								"default": true
							},
							"trace": {
								"type": "boolean",
								"description": "Enable logging of the Debug Adapter Protocol.",
								"default": true
							},
							"compileError": {
								"type": "string",
								"description": "Simulates a compile error in 'attach' request.",
								"enum": ["default", "show", "hide"],
								"enumDescriptions": [
									"default: show fake compile error to user",
									"show fake compile error to user",
									"do not show fake compile error to user"
								]
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"type": "mock",
						"request": "launch",
						"name": "Ask for file name",
						"program": "${workspaceFolder}/${command:AskForProgramName}",
						"stopOnEntry": true
					}
				],
				"configurationSnippets": [
					{
						"label": "Mock Debug: Launch",
						"description": "A new configuration for 'debugging' a user selected markdown file.",
						"body": {
							"type": "mock",
							"request": "launch",
							"name": "Ask for file name",
							"program": "^\"\\${workspaceFolder}/\\${command:AskForProgramName}\"",
							"stopOnEntry": true
						}
					}
				],
				"variables": {
					"AskForProgramName": "extension.cc65-dbg.getProgramName"
				}
			}
		]
	}
}
